Patrick Watters
CS471 Assignment 2

Problem 1:

Examine arith1.c: It contains an implementation of a simple arithmatic calculator. The following will compile and run a few test cases. 

make arith1 
./arith1 
1 + 2 + 3
./arith1 
1 + 2 * 3

The arith1 language is parsed used a recursive-descent parser: It is fairly straightforward to determine the language's grammar from the parser. 

In particular:
(1) Using the code, give the complete grammar in BNF form 
(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult? 

Problem 1 Answer:
a. 
expr -> expr '+' term | term
term -> term '*' factor | factor
factor -> '(' expr ')' | identifier | number

b.
The grammar is right recursive and * + are right associative as a result.


Problem 2:

Using the grammar you extracted in Problem 1 add two new operators,  average, "@",  and minus, "-" , operators to the arith1 language .  The "-" should have the a higher precedence than "+" and lower precedence than "*".  The average operator, "@", should have the higher precedence than "*" but still be able to be overridden using parentheses as defined by the grammar. Both operators should have the same associativity as plus and times.
Give the modified grammar. 

Problem 2 Answer:
expr -> expr '+' term1 | term1
term1 -> term1 '-' term2 | term2
term2 -> term2 '*' term3 | term3
term3 -> term3 '@' factor | factor
factor -> '(' expr ')' | identifier | number

Problem 3:

Write the left derivation for the following expressions according to the modified grammar from Problem 2 -- It may help to draw the parse tree first.
1 + 2 - 2
2 - 3 * 5
10 - 5 @ 2
10 - 7 - 2
NOTE: You should show only one step at a time -- as we did in class -- but may jump from number to the actual terminal number.
For example:
number '+' expr
'10' '+' expr 

Problem 3 Answer:
-> expr
-> expr + term1
-> nummber + term1 - term2
-> 1 + number - number
-> 1 + 2 - 2

-> expr
-> term1
-> term1 - term2
-> number - term2 * term3
-> number - number * number
-> 2 - 3 * 5

-> expr
-> term1
-> term1 - term2
-> number - term3
-> 10 - term3 @ factor
-> 10 - number @ number
-> 10 - 5 @ 2

-> expr
-> term1 
-> term1 - term2
-> term1 - term2 - term2
-> number - number - number
-> 10 - 7 - 2

Problem 4:

Modify arith1.c and add the new operator that you defined in Problem 2. Pay careful attention to the pattern between the original grammar and the associated function calls in arith1.c. If you have properly adjusted the grammar, it should be a straightforward modification of the original functions with the additional of a couple new function for the new operator.  ()

You should pay careful attention to how expressions evaluate; a compile and a correct evaluation of some expressions does not mean you have modified everything correctly. Try the sample cases below.  

./arith 
1 + 2 - 2 
The result is: 1

./arith
2 - 3 * 5
The result is: -13

./arith 
5 @ 2
The result is: 3

./arith 
10 - 7 - 2
The result is:   5

./arith 
10 - 5 @ 2
The result is:   7

Problem 4 Answer:

int expr(void) { 
  int result = term();
  if (token == '+') {
    match('+');
    result += expr();
  } 
  return result;
}

int term(void) { 
  int result = term2();
  if (token == '-') {
    match('-');
    result -= term();
  } 
  return result;
}

int term2(void) { 
  int result = term3();
  if (token == '*') {
    match('*');
    result *= term2();
  } 
  return result;
}

int term3(void) { 
  int result = factor();
  if (token == '@') {
    match('@');
    result = ((result + term3())/2);
  } 
  return result;
}

int factor(void) { 
  int result;
  if (token == '(') { 
    match('(');
    result = expr();
    match(')');
  } else {
    result = number();
  }
  return result;
}

Problem 5:

Examine arith2.c: It contains another implementation of a simple arithmetic calculator. The following will compile and run a few test cases.  

make arith2 
./arith2 
1 + 2 * 3 
./arith2 
1 + 2 + 3

The arith2 language is parsed using a slightly different technique, although it is still considered a recursive-descent parser. Pay careful attention to the way while loops are used to parse, instead of pure recursion. Thinking in terms of EBNF (hint: kleene star) may help determine the difference from the previous grammar.

In particular:
(1) Using the code, give the complete grammar in BNF or EBNF form 
(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult? 

Problem 5 Answer:
a.
expr -> term [ ('+') term ]*
term -> factor [ ('*') factor ]*
factor -> '(' expr ')' | identifier | number

b.
This grammar is left recursive and the associativities seem to be the same.


Problem 6: 
Using the grammar you extracted in Problem 5 add two new operators to the arith2 language. The first, minus, should have higher precedence than plus, but lower precedence than mult. The second, average, "@", should have higher precedence than mult, but still be able to be overridden using parentheses as defined by the grammar. Both operators should have the same associativity as plus and times.

Give the modified grammar.

Problem 7:
expr -> term1 [ ('+') term1 ]*
term1 -> term2 [ ('-') term2 ]*
term2 -> term3 [ '*' term3 ]*
term3 -> factor [ '@' factor ]*
factor -> '(' expr ')' | identifier | number


Write the left derivation for the following expressions according to the modified grammar from Problem 6 -- It may help to draw the parse tree first.
1 + 2 - 2
2 - 3 * 5
10 - 5 @ 2
10 - 7 - 2


NOTE: You should show only one step at a time -- as we did in class -- but may jump from number to the actual terminal number.
For example:
number '+' expr
'10' '+' expr

Problem 7 Answer:
-> expr
-> term1 + term1
-> term1 + term1 - term2
-> factor + factor - factor
-> number + number - number
-> 1 + 2 - 2

-> expr
-> term1
-> term2
-> term2 - term2
-> term2 - term3 * term3
-> factor - factor * factor
-> number - number * number
-> 2 - 3 * 5

-> expr
-> term1
-> term2
-> term2 - term2
-> term2 - term3
-> term2 - term3 
-> term2 - factor @ factor
-> factor - number @ number
-> 10 - 5 @ 2

-> expr
-> term1
-> term2
-> term2 - term2
-> term2 - term3
-> term2 - term3 - term3
-> factor - factor - factor
-> number - number - number
-> 10 - 7 - 2

Problem 8:


Modify arith2.c and add the new operators that you defined in Problem 6. Pay careful attention to the pattern between the original grammar and the associated function calls in arith2.c. If you have properly adjusted the grammar, it should be a straightforward modification of the original functions with the additional of a couple new functions for the new operators.

You should pay careful attention to how expressions evaluate; a compile and a correct evaluation of some expressions does not mean you have modified everything correctly. Try the sample cases below. 

./arith 
1 + 2 - 2 
The result is: 
1 

./arith 
2 - 3 * 5
The result is: -13

./arith 
10 - 5 @ 2
The result is:
7

./arith 
10 - 7 - 2
The result is:
1


 
You DO NOT have to paste arith2.c in the template file, but you must submit the modified arith2.c file in the tarball that you will create for this assignment.

Problem 8 Answer:


int expr(void) { 
  int result = term();
  while (token == '+') { 
    match('+');
    result += term();
  }
  return result;
}

int term(void) { 
  int result = term2();
  while (token == '-') {
    match('-');
    result -= term();
  } 
  return result;
}

int term2(void) { 
  int result = term3();
  while (token == '*') {
    match('*');
    result *= term2();
  } 
  return result;
}

int term3(void) { 
  int result = factor();
  while (token == '@') {
    match('@');
    result = ((result + term3())/2);
  } 
  return result;
}

int factor(void) { 
  int result;
  if (token == '(') { 
    match('(');
    result = expr();
    match(')');
  } else {
    result = number();
  }
  return result;
}


Problem 9:

Write regular expressions to match the following -- You should test your solutions using rubular.

(1) C identifiers: A C identifier must start with an alpha character or an underscore, and may be followed by alphanumeric characters or the underscore.
(2) Strings: A string must start and end with an double quote and may contain any character except the double quote itself; however, you may escape a double quote inside the string using \ -- i.e. "this is \" a string"
(3) Strings over the alphabet {a,b} that contain an even number of b's. 
(4) Strings over the alphabet {a,b,c} that contain an odd number of c's.

Samples:
The following are acceptable strings for (3): abb, bab, bbaaa, ababa; the following should be rejected for (3): abbb, babb, bbabbb.

The following are acceptable string for (4): cabab, ccaaabc, ccc; the following should be rejected for (4): cababc, ccaaab, bbabcc. 

NOTE: Rubular will feed the entire input at each character into the regex. If we have a regex aa* and give rubular the input "baa" it will match "aa". The entire string does not match however, which is correct and how you should view the regular expression. For example, if you were asked to write a regex that one or more a, and match "baa" on rubular then you have done something wrong.


Problem 9 Answer:
a. ^[_a-z][a-zA-Z0-9_]+$
b. ((?<![\\])['"])((?:.(?!(?<![\\])\1))*.?)\1
c. a*(ba*ba*)*a*
d. ab*(abc*cab*)*abc*
https://www.metaltoad.com/blog/regex-quoted-string-escapable-quotes

Problem 10:

Both _Bool and bool are available in the ISO C standard published in 2011.  Briefly explain:
(1) What are they used for?
(2) Why do both exist?
(3) Is one better than the other? Why? 

Problem 10 Answer:
a. Used as boolean types to hold values 0 or 1.
b. _Bool is a native type while bool is a standard library macro declared in stdbool.h. It will resolve to _Bool and hold values O or 1. C did not originally have a standard Boolean type to allow for programmers discretion. Usually an int may be faster or more space efficient. They both exist because bool wasnt reserved as a keyword and was only introduced in C99. 
c. bool may be faster because it's treated as a single byte while int is treated as 4 bytes.

Problem 11:

Page 69 cyu 19:
What are pragmas? Why are they processed by the scanner?  Briefly, if you are a language designer what are the trade off of providing pragmas in a language?

Problem 11 Answer:
Pragmas give directions to the compiler for possible optimizations. They are processed by the scanner like comments. They can help out compilers by providing useful information to the compiler for speed and space efficiency improvements, but they also can lead to more complicated source code and provide wrong information. 


Problem 12:
Operator precedence and associativity are often subtle details that are overlooked when using a language (and require careful treatment when implementing a compiler). One way around this issue is to use prefix or postfix notation. This is not as foreign as you think, every function call is in prefix notation: 2 powI 3 is just as valid as + 2 3.

Rewrite the expressions a–d below in prefix notation. Assume the following precedences  and associativities for the operators:
Binary 
Operator
Precedence
(3 highest)
Associativity
^
3
left
*
2
left
/
2
left
+
1
right

The algorithm for rewriting is very straightforward: 
Parenthesize the expression fully, using the rules of precedence and associativity.
Within each parenthesized subexpression, move the operator to left of its left operand.
Remove the parentheses.

The operands will have the same order in the resulting expressions (due to the restriction that the operators are NOT commulatative).

a) z  ^  w  ^  x  +  y 
  ((z ^ (w ^ x)) + y)
   + ^ z ^ w x y 

b)  w  +  x  +  y  *  z
   (w + (x + (y * z))
    + w + x * y z

c)  w  *  x  *  y  ^  z
   ((w * x) * (y ^ z))
    * * w x ^ y z

d)  w  *  x  /  y  *  z
   ((w * x) / (y * z))
   / * w x * y z

Problem 12 Answer:


Problem 13:

Repeat Problem 12, but use postfix  notation instead.

Problem 13 Answer:
a.  ((z ^ (w ^ x)) + y)
	z w x ^ ^ y + 

b.	w + x  +  y  *  z  
	(w + (x + (y * z)))
	w x y z * + + 
	
c.	w  *  x  *  y  ^  z
	(w * (x * (y ^ z)))
	w x y z ^ * * 

d.  w  *  x  /  y  *  z
	((w * x) / (y * z))
	w x * y z * /
